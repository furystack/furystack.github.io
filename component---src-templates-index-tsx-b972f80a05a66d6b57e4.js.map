{"version":3,"file":"component---src-templates-index-tsx-b972f80a05a66d6b57e4.js","mappings":"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","sources":["webpack://furystack.github.io/./src/components/Pagination.tsx","webpack://furystack.github.io/./src/templates/index.tsx"],"sourcesContent":["import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport { darken } from 'polished';\r\nimport { css } from '@emotion/react';\r\n\r\nimport { colors } from '../styles/colors';\r\n\r\nexport interface PaginationProps {\r\n  currentPage: number;\r\n  numPages: number;\r\n}\r\n\r\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\r\n  const isFirst = currentPage === 1;\r\n  const isLast = currentPage === numPages;\r\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\r\n  const nextPage = (currentPage + 1).toString();\r\n\r\n  return (\r\n    <nav css={navCss}>\r\n      <div>\r\n        {!isFirst && (\r\n          <Link to={prevPage} rel=\"prev\">\r\n            {/* << symbol */}\r\n            {String.fromCharCode(171)}\r\n          </Link>\r\n        )}\r\n\r\n        {Array.from({ length: numPages }, (_, i) => (\r\n          <Link key={`pagination-number${i + 1}`} className={i + 1 === currentPage ? 'active' : ''} to={`/${i === 0 ? '' : i + 1}`}>\r\n            {i + 1}\r\n          </Link>\r\n        ))}\r\n\r\n        {!isLast && (\r\n          <Link to={nextPage} rel=\"next\">\r\n            {/* >> symbol */}\r\n            {String.fromCharCode(187)}\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst navCss = css`\r\n  text-align: center;\r\n  div {\r\n    display: inline-block;\r\n  }\r\n\r\n  a {\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\r\n    background: #fff;\r\n    color: black;\r\n    float: left;\r\n    padding: 8px 16px;\r\n    text-decoration: none;\r\n    transition: background-color .3s;\r\n    border: 1px solid #ddd;\r\n    margin: 0 4px;\r\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\r\n    border-radius: 6px;\r\n    margin-bottom: 5px;\r\n    min-width: 50px;\r\n\r\n    &.active {\r\n      -webkit-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\r\n      -moz-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\r\n      box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\r\n    }\r\n\r\n    &:hover:not(.active) {\r\n      background-color: #ddd;\r\n    }\r\n\r\n    &:hover {\r\n      text-decoration: none;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Pagination;\r\n","import { graphql } from 'gatsby';\r\nimport { FixedObject } from 'gatsby-image';\r\nimport React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport { css } from '@emotion/react';\r\n\r\nimport { Footer } from '../components/Footer';\r\nimport SiteNav from '../components/header/SiteNav';\r\nimport Pagination from '../components/Pagination';\r\nimport { PostCard } from '../components/PostCard';\r\nimport { Wrapper } from '../components/Wrapper';\r\nimport IndexLayout from '../layouts';\r\nimport {\r\n  inner,\r\n  outer,\r\n  PostFeed,\r\n  Posts,\r\n  SiteDescription,\r\n  SiteHeader,\r\n  SiteHeaderContent,\r\n  SiteMain,\r\n  SiteTitle,\r\n  SiteHeaderStyles,\r\n} from '../styles/shared';\r\nimport config from '../website-config';\r\nimport { PageContext } from './post';\r\n\r\nexport interface IndexProps {\r\n  pageContext: {\r\n    currentPage: number;\r\n    numPages: number;\r\n  };\r\n  data: {\r\n    logo: {\r\n      childImageSharp: {\r\n        fixed: FixedObject;\r\n      };\r\n    };\r\n    header: {\r\n      childImageSharp: {\r\n        fixed: FixedObject;\r\n      };\r\n    };\r\n    allMarkdownRemark: {\r\n      edges: Array<{\r\n        node: PageContext;\r\n      }>;\r\n    };\r\n  };\r\n}\r\n\r\nconst IndexPage: React.FC<IndexProps> = props => {\r\n  const { width, height } = props.data.header.childImageSharp.fixed;\r\n\r\n  return (\r\n    <IndexLayout css={HomePosts}>\r\n      <Helmet>\r\n        <html lang={config.lang} />\r\n        <title>{config.title}</title>\r\n        <meta name=\"description\" content={config.description} />\r\n        <meta property=\"og:site_name\" content={config.title} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:title\" content={config.title} />\r\n        <meta property=\"og:description\" content={config.description} />\r\n        <meta property=\"og:url\" content={config.siteUrl} />\r\n        <meta\r\n          property=\"og:image\"\r\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\r\n        />\r\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\r\n        {config.googleSiteVerification && (\r\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\r\n        )}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta name=\"twitter:title\" content={config.title} />\r\n        <meta name=\"twitter:description\" content={config.description} />\r\n        <meta name=\"twitter:url\" content={config.siteUrl} />\r\n        <meta\r\n          name=\"twitter:image\"\r\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\r\n        />\r\n        {config.twitter && (\r\n          <meta\r\n            name=\"twitter:site\"\r\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\r\n          />\r\n        )}\r\n        <meta property=\"og:image:width\" content={width.toString()} />\r\n        <meta property=\"og:image:height\" content={height.toString()} />\r\n      </Helmet>\r\n      <Wrapper>\r\n        <div\r\n          css={[outer, SiteHeader, SiteHeaderStyles]}\r\n          className=\"site-header-background\"\r\n          style={{\r\n            backgroundImage: `url('${props.data.header.childImageSharp.fixed.src}')`,\r\n          }}\r\n        >\r\n          <div css={inner}>\r\n            <SiteNav isHome />\r\n            <SiteHeaderContent className=\"site-header-content\">\r\n              <SiteTitle className=\"site-title\">\r\n                {props.data.logo ? (\r\n                  <img\r\n                    style={{ maxHeight: '55px' }}\r\n                    src={props.data.logo.childImageSharp.fixed.src}\r\n                    alt={config.title}\r\n                  />\r\n                ) : (\r\n                  config.title\r\n                )}\r\n              </SiteTitle>\r\n              <SiteDescription>{config.description}</SiteDescription>\r\n            </SiteHeaderContent>\r\n          </div>\r\n        </div>\r\n        <main id=\"site-main\" css={[SiteMain, outer]}>\r\n          <div css={[inner, Posts]}>\r\n            <div css={[PostFeed]}>\r\n              {props.data.allMarkdownRemark.edges.map((post, index) => {\r\n                // filter out drafts in production\r\n                return (\r\n                  (post.node.frontmatter.draft !== true ||\r\n                    process.env.NODE_ENV !== 'production') && (\r\n                    <PostCard key={post.node.fields.slug} post={post.node} large={index === 0} />\r\n                  )\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </main>\r\n        {props.children}\r\n        {props.pageContext.numPages > 1 && (\r\n          <Pagination\r\n            currentPage={props.pageContext.currentPage}\r\n            numPages={props.pageContext.numPages}\r\n          />\r\n        )}\r\n        <Footer />\r\n      </Wrapper>\r\n    </IndexLayout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query blogPageQuery($skip: Int!, $limit: Int!) {\r\n    logo: file(relativePath: { eq: \"img/ghost-logo.png\" }) {\r\n      childImageSharp {\r\n        # Specify the image processing specifications right in the query.\r\n        # Makes it trivial to update as your page's design changes.\r\n        fixed {\r\n          ...GatsbyImageSharpFixed\r\n        }\r\n      }\r\n    }\r\n    header: file(relativePath: { eq: \"img/blog-cover.png\" }) {\r\n      childImageSharp {\r\n        # Specify the image processing specifications right in the query.\r\n        # Makes it trivial to update as your page's design changes.\r\n        fixed(width: 2000, quality: 100) {\r\n          ...GatsbyImageSharpFixed\r\n        }\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { draft: { ne: true } } }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            date\r\n            tags\r\n            draft\r\n            excerpt\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 3720) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            author {\r\n              id\r\n              bio\r\n              avatar {\r\n                children {\r\n                  ... on ImageSharp {\r\n                    fluid(quality: 100, srcSetBreakpoints: [40, 80, 120]) {\r\n                      ...GatsbyImageSharpFluid\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          excerpt\r\n          fields {\r\n            readingTime {\r\n              text\r\n            }\r\n            layout\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst HomePosts = css`\r\n  @media (min-width: 795px) {\r\n    .post-card-large {\r\n      flex: 1 1 100%;\r\n      flex-direction: row;\r\n      padding-bottom: 40px;\r\n      min-height: 280px;\r\n      border-top: 0;\r\n    }\r\n\r\n    .post-card-large .post-card-title {\r\n      margin-top: 0;\r\n      font-size: 3.2rem;\r\n    }\r\n\r\n    .post-card-large:not(.no-image) .post-card-header {\r\n      margin-top: 0;\r\n    }\r\n\r\n    .post-card-large .post-card-image-link {\r\n      position: relative;\r\n      flex: 1 1 auto;\r\n      margin-bottom: 0;\r\n      min-height: 380px;\r\n    }\r\n\r\n    .post-card-large .post-card-image {\r\n      position: absolute;\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n\r\n    .post-card-large .post-card-content {\r\n      flex: 0 1 361px;\r\n      justify-content: center;\r\n    }\r\n\r\n    .post-card-large .post-card-title {\r\n      margin-top: 0;\r\n      font-size: 3.2rem;\r\n    }\r\n\r\n    .post-card-large .post-card-content-link {\r\n      padding: 0 0 0 40px;\r\n    }\r\n\r\n    .post-card-large .post-card-meta {\r\n      padding: 0 0 0 40px;\r\n    }\r\n\r\n    .post-card-large .post-card-excerpt p {\r\n      margin-bottom: 1.5em;\r\n      font-size: 1.8rem;\r\n      line-height: 1.5em;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default IndexPage;\r\n"],"names":["navCss","css","darken","colors","_ref","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","___EmotionJSX","Link","to","rel","String","fromCharCode","Array","from","length","_","i","key","className","HomePosts","name","styles","props","width","height","data","header","childImageSharp","fixed","IndexLayout","Helmet","lang","config","content","property","src","Wrapper","outer","SiteHeader","SiteHeaderStyles","style","backgroundImage","inner","SiteNav","isHome","SiteHeaderContent","SiteTitle","logo","maxHeight","alt","SiteDescription","id","SiteMain","Posts","PostFeed","allMarkdownRemark","edges","map","post","index","node","frontmatter","draft","PostCard","fields","slug","large","children","pageContext","Pagination","Footer"],"sourceRoot":""}