<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Ghost's Blog]]></title><description><![CDATA[A port of the casper blog built for gatsby]]></description><link>https://gatsby-casper.netlify.com</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 23 Jun 2021 12:30:37 GMT</lastBuildDate><item><title><![CDATA[Build a business layer with a Repository 📦]]></title><description><![CDATA[Disclaimer If you are using a repository, use the repository all the time. - Anonymous As callbacks, authorization and data manipulation…]]></description><link>https://gatsby-casper.netlify.com/005-getting-started-with-repository/</link><guid isPermaLink="false">https://gatsby-casper.netlify.com/005-getting-started-with-repository/</guid><pubDate>Wed, 23 Jun 2021 10:58:20 GMT</pubDate><content:encoded>&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are using a repository, use the repository all the time. - Anonymous&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As callbacks, authorization and data manipulation works through the Repository layer, you should always use Repository if you have dependant business logic through it.&lt;/p&gt;
&lt;h3&gt;Simplifying a complex idea&lt;/h3&gt;
&lt;p&gt;Let’s say you have an entity type. You have to be notified each and every time somebody creates a new instance.
You also have to take care about that new entities should have some validation.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyEntity&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myInjector &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Injector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setupStores&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; sm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InMemoryStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; model&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MyEntity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; primaryKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;key&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setupRepository&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;repo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
    repo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createDataSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MyEntity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function-variable function&quot;&gt;authorizeAdd&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; entity &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entity&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; entity&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            isAllowed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          isAllowed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Failed to create entity. The value length should be greater than 2 but was &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
            entity&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;length
          &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;. Entity: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dataSet &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; myInjector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDataSetFor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MyEntity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

dataSet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onEntityAdded&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; entity &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Hey, a new entity has been added&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; entity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

dataSet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myInjector&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Will fail&lt;/span&gt;
dataSet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myInjector&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;asd&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Will pass and will be logged to the console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Event subscriptions&lt;/h3&gt;
&lt;p&gt;You can subscribe to the following events in your Repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;onEntityAdded&lt;/code&gt; will notify you when a new entity has been created&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;onEntityUpdated&lt;/code&gt; will fire on updates&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;onEntityRemoved&lt;/code&gt; will notify about the deletions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Authorizing operations&lt;/h3&gt;
&lt;p&gt;You can define authorization / validation during you create the DataSet. These callbacks are the followings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;authorizeAdd&lt;/code&gt; will verify entities before adding / inserting them into the stores&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;authorizeGet&lt;/code&gt; / &lt;code class=&quot;language-text&quot;&gt;authorizeGetEntity&lt;/code&gt; will check that you can get that single entity (also &lt;code class=&quot;language-text&quot;&gt;authorizeGetEntity&lt;/code&gt; won’t check collections)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;authorizeUpdate&lt;/code&gt; / &lt;code class=&quot;language-text&quot;&gt;authorizeUpdateEntity&lt;/code&gt; will verify before update. &lt;code class=&quot;language-text&quot;&gt;authorizeUpdate&lt;/code&gt; won’t load the entity from the Store (you won’t have as a parameter) while &lt;code class=&quot;language-text&quot;&gt;authorizeUpdateEntity&lt;/code&gt; does&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;authorizeRemove&lt;/code&gt; / &lt;code class=&quot;language-text&quot;&gt;authorizeRemoveEntity&lt;/code&gt; will fire before remove. Again, &lt;code class=&quot;language-text&quot;&gt;authorizeRemoveEntity&lt;/code&gt; loads the whole entity from the store before deleting it.&lt;/li&gt;
&lt;li&gt;with &lt;code class=&quot;language-text&quot;&gt;addFilter&lt;/code&gt;, you can append conditions to your filter expressions to narrow collection queries and optimize performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Manipulating Data&lt;/h3&gt;
&lt;p&gt;There are also two callbacks that allows you to modify data: with &lt;code class=&quot;language-text&quot;&gt;modifyOnAdd&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;modifyOnUpdate&lt;/code&gt;, you can update data in some fields like e.g. &lt;code class=&quot;language-text&quot;&gt;createdByUser&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;lastModificationDate&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Getting the Context&lt;/h3&gt;
&lt;p&gt;All methods above has an &lt;em&gt;injector&lt;/em&gt; instance on the call parameter - you can use that injector to get service instances from the right caller context. It means that you can e.g.: get the current user in the following way.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;      &lt;span class=&quot;token function-variable function&quot;&gt;authorizeAdd&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; injector &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currentUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; injector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCurrentUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;roles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;role&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; role &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;CanAddMyEntity&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            isAllowed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          isAllowed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The user doesn&apos;t have the role &apos;CanAddMyEntity&apos;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Let's store some freaking data 📦]]></title><description><![CDATA[About Physical stores In FuryStack, the preferred mode of accessing data is via physical stores. A physical store is a bare minimum…]]></description><link>https://gatsby-casper.netlify.com/004-getting-started-with-data-stores/</link><guid isPermaLink="false">https://gatsby-casper.netlify.com/004-getting-started-with-data-stores/</guid><pubDate>Wed, 23 Jun 2021 09:58:20 GMT</pubDate><content:encoded>&lt;h3&gt;About Physical stores&lt;/h3&gt;
&lt;p&gt;In FuryStack, the preferred mode of accessing data is via physical stores. A &lt;a href=&quot;https://github.com/furystack/furystack/blob/develop/packages/core/src/models/physical-store.ts&quot;&gt;physical store&lt;/a&gt; is a bare minimum interface that a store should do. A store is always bound to a collection with a specified type of entities. It can only do the basic CRUD operations (create, get by Id, filter, delete, count). These stores should &lt;strong&gt;not have a concept about relations&lt;/strong&gt;, indexes and other storage-specific stuff. Data stores &lt;strong&gt;doesn’t care about permission&lt;/strong&gt;, role or session checking.&lt;/p&gt;
&lt;h3&gt;Store setup&lt;/h3&gt;
&lt;p&gt;The setup is quite straightforward - create your entity class (the class itself will be used as a primary key and the fields for type checking) you can use the extension method called &lt;code class=&quot;language-text&quot;&gt;.setupStores()&lt;/code&gt; on the Injector:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyEntity&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myInjector &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Injector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setupStores&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  sm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InMemoryStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; model&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MyEntity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; primaryKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;key&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Basic usage&lt;/h3&gt;
&lt;p&gt;You can retrieve your store from any injector with &lt;code class=&quot;language-text&quot;&gt;myInjector.getInstance(StoreManager).getStoreFor(MyEntity)&lt;/code&gt;. You will receive a PhysicalStore instance and you can do all the basic operations mentioned above.&lt;/p&gt;
&lt;h3&gt;What type of store(s) should you choose?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;InMemoryStore&lt;/strong&gt; is the simplest implementation and a part of the Core package. Data won’t be persisted but no hassle with additional dependencies. Can be used for POCs or for e.g. storing user sessions or in a demo / experimental enviromnent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filesystem-store&lt;/strong&gt; is another simple implementation, it saves (and reloads on change) your data to files, however it’s recommended to use only in development / experimental environments. Lives in a &lt;code class=&quot;language-text&quot;&gt;@furystack/filesystem-store&lt;/code&gt; package.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sequelize-store&lt;/strong&gt; is built on the top of the Sequelize package and you can create stores with all of it’s supported DBs (MySQL / Postgres / SQLite, etc…). Recommended if you want to work with any supported SQL-based DB.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mongodb-store&lt;/strong&gt; provides a store implementation for the famous document store. Simple yet powerful usage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;redis-store&lt;/strong&gt; allows you to connect to a redis service. Useful is you want e.g. storing user sessions and keep them in sync between multiple web nodes. Altough searching is not supported…&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[DI / IOC with @furystack/inject 💉]]></title><description><![CDATA[Injectable services An injectable service is basically a class, decorated with the  decorator. If you decorate a class, its injectable…]]></description><link>https://gatsby-casper.netlify.com/003-getting-started-with-inject/</link><guid isPermaLink="false">https://gatsby-casper.netlify.com/003-getting-started-with-inject/</guid><pubDate>Wed, 23 Jun 2021 08:58:20 GMT</pubDate><content:encoded>&lt;h2&gt;Injectable services&lt;/h2&gt;
&lt;p&gt;An &lt;em&gt;injectable service&lt;/em&gt; is basically a class, decorated with the &lt;code class=&quot;language-text&quot;&gt;@Injectable()&lt;/code&gt; decorator. If you decorate a class, its injectable options (e.g. lifetime) and constructor argument types will be stored and the injector will be able to instantiate a new instance any time. Constructor arguments should be also &lt;em&gt;injectable services&lt;/em&gt; and they will be resolved recursively. Take a look at the following example and you’ll get the idea:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; injector &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Injector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
@&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; service2&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Service2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; service3&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Service3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
@&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
@&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bar&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;injector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Service1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;service2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;injector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Service1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;service2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;bar&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of the 3 classes are decorated as an injectable service. If you request an instance of ‘Service1’, the framework will also provide an instance of the two dependencies as well.&lt;/p&gt;
&lt;h2&gt;Injector&lt;/h2&gt;
&lt;p&gt;An &lt;code class=&quot;language-text&quot;&gt;Injector&lt;/code&gt; is basically an &lt;em&gt;extendable container&lt;/em&gt; that instantiates services with dependencies and handles their lifecycles. The most used and most important method is the &lt;code class=&quot;language-text&quot;&gt;injector.getInstance(MyServiceClass)&lt;/code&gt; that returns with an instance from a requested service. Injectors are smart enough to handle lifecycles (e.g. “singleton” services will be constructed once per injector).&lt;/p&gt;
&lt;p&gt;You can create multiple injectors in your project, they can act as multiple separated “global” containers.&lt;/p&gt;
&lt;p&gt;You can also organize injectos in a tree structure in the following way:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; childInjector &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; injector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; owner&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;myCustomContext&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Creating &lt;em&gt;child injectors&lt;/em&gt; can be useful if you want to store contextual data (e.g. a per-http-request context that should be initialized once)&lt;/p&gt;
&lt;h2&gt;Lifecycles&lt;/h2&gt;
&lt;p&gt;The package defines four types of lifecycle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Transient&lt;/strong&gt; injectables are not cached - if you request an instance, you will get a new one every time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scoped&lt;/strong&gt; injectables are cached, but only on the current level. If a service has been created in a current injector, the existing instance will be returned.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Singleton&lt;/strong&gt; injectables are hoisted to the root injector. If you request a singleton, the injector will check create the instance in it’s highest parent - and also returns it from there, if already exists.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explicit&lt;/strong&gt; values are not really injectables - you can call &lt;code class=&quot;language-text&quot;&gt;injector.setExplicitInstance(myServiceInstance)&lt;/code&gt; to set up an instance manually. Just like scoped services, explicit instances will be returned from the current scope only.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Extension methods&lt;/h2&gt;
&lt;p&gt;A simple injector can be easily extended by 3rd party packages with extension methods, just like the FuryStack packages. These extension methods usually provides a &lt;em&gt;shortcut&lt;/em&gt; of an instance or sets up a preconfigured explicit instance of a service. You can build clean and nice fluent API-s in that way - you can get the idea from one of the &lt;a href=&quot;https://github.com/furystack/furystack/blob/develop/packages/rest-service/src/injector-extensions.ts&quot;&gt;FuryStack Injector Extensions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You find more inject-related articles &lt;a href=&quot;/tags/inject&quot;&gt;here&lt;/a&gt; or check out the package at NPM&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/@furystack/inject&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@furystack/inject.svg?maxAge=3600&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Getting started with the Boilerplate 🏁]]></title><description><![CDATA[Why can it be good for you? If you want to try out the framework without digging deep all of its how-and-whys, you can simply clone the repo…]]></description><link>https://gatsby-casper.netlify.com/002-getting-started-with-a-boilerplate/</link><guid isPermaLink="false">https://gatsby-casper.netlify.com/002-getting-started-with-a-boilerplate/</guid><pubDate>Wed, 23 Jun 2021 08:48:20 GMT</pubDate><content:encoded>&lt;h2&gt;Why can it be good for you?&lt;/h2&gt;
&lt;p&gt;If you want to try out the framework without digging deep all of its how-and-whys, you can simply clone the repo and start hacking in no time.&lt;/p&gt;
&lt;h2&gt;Where can I found it?&lt;/h2&gt;
&lt;p&gt;No suprise, you can find it on a public &lt;a href=&quot;https://github.com/furystack/boilerplate&quot;&gt;Github repo&lt;/a&gt; 😉&lt;/p&gt;
&lt;h2&gt;The Workspaces&lt;/h2&gt;
&lt;p&gt;The Boilerplate is basically a monorepo built with &lt;a href=&quot;https://classic.yarnpkg.com/blog/2017/08/02/introducing-workspaces/&quot;&gt;Yarn Workspaces&lt;/a&gt; and it includes 3 workspace by default: common, frontend and service.&lt;/p&gt;
&lt;h3&gt;Common&lt;/h3&gt;
&lt;p&gt;You can share models, interfaces and logic between your frontend and the backend.
In the Boilerplate, there is a User and Session model and a REST API definition for login / logout.&lt;/p&gt;
&lt;h3&gt;Frontend&lt;/h3&gt;
&lt;p&gt;A Single Page App, based on &lt;a href=&quot;https://github.com/furystack/furystack/tree/develop/packages/shades&quot;&gt;Shades&lt;/a&gt;. It contains a basic layout with header and body, a basic service for login / logout management and login / logout functionality, some placeholder pages and a basic routing. The frontend is bundled with Webpack. The service URL is passed as an environment variable called &lt;code class=&quot;language-text&quot;&gt;SERVICE_URL&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Service&lt;/h3&gt;
&lt;p&gt;The backend service, based entirely on FuryStack. It contains a filesystem-based store for users and an in-memory-store for sessions. It has implemented the example API (with login / logout) and has some other example implementations.&lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;If you want to start a project based on the Boilerplate, the preferred flow should be something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new Repo, using the boilerplate as a template&lt;/li&gt;
&lt;li&gt;Clone it&lt;/li&gt;
&lt;li&gt;Install the dependencies&lt;/li&gt;
&lt;li&gt;Build with &lt;code class=&quot;language-text&quot;&gt;yarn build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start the frontend and the backend with &lt;code class=&quot;language-text&quot;&gt;yarn start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open up the default link: &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Other goodies&lt;/h2&gt;
&lt;h3&gt;Static code analysis&lt;/h3&gt;
&lt;p&gt;The project contains &lt;code class=&quot;language-text&quot;&gt;eslint&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;prettier&lt;/code&gt; to maintain code quality and formatting.&lt;/p&gt;
&lt;h3&gt;Seed&lt;/h3&gt;
&lt;p&gt;It is a good practice to seed your db with basic data - there is a script for creating the test user, to run it, type &lt;code class=&quot;language-text&quot;&gt;yarn seed&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Unit tests&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt; has been also set up - to run, type &lt;code class=&quot;language-text&quot;&gt;yarn test:unit&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;End-to-end testing&lt;/h3&gt;
&lt;p&gt;The boilerplate also includes end-to-end testing with &lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;CI&lt;/h3&gt;
&lt;p&gt;There is an &lt;a href=&quot;https://azure.microsoft.com/en-us/services/devops/pipelines/&quot;&gt;Azure Pipelines&lt;/a&gt; setup included - you can check how this looks like &lt;a href=&quot;https://dev.azure.com/furystack/FuryStack/_build?definitionId=3&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Pipeline contains the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install dependencies&lt;/li&gt;
&lt;li&gt;Run eslint (+prettier)&lt;/li&gt;
&lt;li&gt;Build the project&lt;/li&gt;
&lt;li&gt;Run the Unit tests (and publishes the results)&lt;/li&gt;
&lt;li&gt;Runs the Seed(as it contains data that’s needed for the e2e tests)&lt;/li&gt;
&lt;li&gt;Start up the frontend, the service and run the Cypress E2E tests&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Welcome to FuryStack, Gatsby 💙]]></title><description><![CDATA[So, down with the old one… I’ve opened up the old site to update some docs (and dependencies meanwhile…) and I’ve realized that I didn’t…]]></description><link>https://gatsby-casper.netlify.com/001-welcome/</link><guid isPermaLink="false">https://gatsby-casper.netlify.com/001-welcome/</guid><pubDate>Wed, 23 Jun 2021 08:38:20 GMT</pubDate><content:encoded>&lt;h2&gt;So, down with the old one…&lt;/h2&gt;
&lt;p&gt;I’ve opened up the old site to update some docs (and dependencies meanwhile…) and I’ve realized that I didn’t touch the site since the last two years. Holy shit 😭
There was even &lt;code class=&quot;language-text&quot;&gt;tslint&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;eslint&lt;/code&gt; in the project… So I’ve deicided if I have to touch it, I’ll try to make a more professional approach.&lt;/p&gt;
&lt;h2&gt;Times has changed and so the requirements&lt;/h2&gt;
&lt;p&gt;The new site should be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy to maintain. Maybe some .md files in some PR-s, that’s all. Simple and stupid, with no hassle&lt;/li&gt;
&lt;li&gt;SEO friendly 👉 static. Had some issues in the past with &lt;a href=&quot;https://info340.github.io/client-side-routing.html&quot;&gt;React Router and Github Pages&lt;/a&gt;…&lt;/li&gt;
&lt;li&gt;Should be integrated into CI/CD (that’s still a ToDo 😊)&lt;/li&gt;
&lt;li&gt;Easy-to-setup locally&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The new candidates&lt;/h2&gt;
&lt;p&gt;So I’ve &lt;del&gt;killed&lt;/del&gt; archived the old one and I have to make a replacement. The old site was a react-based SPA. I could do the same with React or Shades but I still had to struggle with routes and SEO…&lt;/p&gt;
&lt;p&gt;First, I’ve checked &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; - as the default approach for Github Pages it’s easy to setup and deploy. We’ve used it in one of my previous workplace, it does the job pretty well.
The downside is that I’m not so familiar with Ruby, &lt;em&gt;gemfiles&lt;/em&gt; and other esotheric things, so the stack is totally out of scope. So the templating syntax, theming and stuffs like these.&lt;/p&gt;
&lt;p&gt;The next candidate is &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;GatsbyJS&lt;/a&gt; - I’ve found a great theme with Typescript support. I’ve updated all deprecated dependencies and it’s still working. I’m familiar with the syntax. So far, so good. There are we now.&lt;/p&gt;
&lt;h2&gt;What to expect&lt;/h2&gt;
&lt;p&gt;The plan is to publish announcements like new releases and features, some posts about concepts in FuryStack some techical stuff, development practices and dirty little tricks. But no promises how often will this happen 😉&lt;/p&gt;
&lt;h2&gt;Coming out next&lt;/h2&gt;
&lt;p&gt;The next step will be setting up the CI/CD and migrating the docs from the old site (or maybe the main monorepo).&lt;/p&gt;</content:encoded></item></channel></rss>